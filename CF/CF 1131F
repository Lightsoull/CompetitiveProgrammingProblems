#include <bits/stdc++.h>
#define sz(v)   ((int)(v).size())
#define  all(v)    ((v).begin()),((v).end())
#define  allr(v)    ((v).rbegin()),((v).rend())
#define   pb         push_back
#define   mp         make_pair
#define   mt         make_tuple
//#define   Y            imag()
//#define   X            real()
#define    clr(v,d)      memset( v, d ,sizeof(v))
#define   angle(n)      atan2((n.imag()),(n.real()))
#define   vec(a,b)       ((b)-(a))
#define   length(a)      hypot( (a.imag()),(a.real()) )
#define   normalize(a)      (a)/(length(a))
//#define    dp(a,b)          (((conj(a))*(b)).real())
//#define    cp(a,b)          (((conj(a))*(b)).imag())
#define    lengthsqrt(a)       dp(a,a)
#define    rotate0( a,ang)    ((a)*exp( point(0,ang) ))
#define    rotateA(about,p,ang)   (rotate0(vec(about,p),ang)+about)
#define    lcm(a,b)                ((a*b)/(__gcd(a,b)))
#define    reflection0(m,v)         (conj((v)/(m))*(m))
#define     reflectionA(m,v,p0)     (conj( (vec(p0,v))/(vec(p0,m)) ) * (vec(p0,m)) ) + p0
//#define     same(p1,p2)               ( dp(  vec(p1,p2),vec(p1,p2)) < eps )
#define     PT                    complex<double>
#define outfile freopen("out.out", "w", stdout);
#define infile  freopen("in.in", "r", stdin);
#define PI acos(-1)
typedef  long long     ll ;
typedef  unsigned long long ull;
const double eps= (1e-9);
using namespace std;
int dcmp(long double a,long double b){   return fabsl(a-b)<=eps ? 0: (a>b)? 1:-1  ;}
int getBit(int num, int idx) {return ((num >> idx) & 1) == 1;}
int setBit1(int num, int idx) {return num | (1<<idx);}
ll setBit0(ll num, int idx) {return num & ~(1ll<<idx);}
ll flipBit(int num, int idx) {return num ^ (1<<idx);}
void FS(){ ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);}
int countNumBit1(int mask) {int ret=0; while (mask)     {mask &= (mask-1);++ret;    }return ret;}
const int N=150009;
int par[N],rnk[N],lf[N],rg[N],vis[N];
vector< vector<int> > v(N);
vector<int> v1,ans;
int getpar(int n)
{
    if(par[n]==n)
        return n;
    return par[n]=getpar(par[n]);
}
void I()
{
    for(int i=0;i<N;i++)
    {
        par[i]=i,rnk[i]=1;
        lf[i]=i; rg[i]=i;
    }
}
void lnk(int a,int b)
{
    a=getpar(a);
    b=getpar(b);
    if(a==b)
        return;
    v[rg[a]].pb(lf[b]);
    rg[a]=rg[b];
    rnk[a]+= rnk[b],rnk[b]=0;
    par[b]=a;

}
int main()
{
    int n;
    cin>>n;
    I();
    for(int i=0;i<n-1;i++)
    {
        int x,y;
        cin>>x>>y;
        lnk(x,y);
    }

    for(int i=1;i<=n;i++)
    {
        int p=getpar(i);
        vis[p]++;
        if(vis[p]==1)
            v1.pb(p);
    }
    for(int i=0;i<sz(v1);i++)
    {
        int no=v1[i];
        int j=lf[no];
        while(1)
        {
            ans.pb(j);
            if(sz(v[j])==0)
                break;
            j=v[j][0];
        }
    }
    for(int i=0;i<sz(ans);i++)
        cout<<ans[i]<<" ";
}























